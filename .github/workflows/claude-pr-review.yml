name: Claude PR Review with Agent Team

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, ready_for_review]

jobs:
  claude-agent-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        id: tests
        run: |
          echo "test_status=unknown" >> $GITHUB_OUTPUT
          if python -m pytest test_app.py -v; then
            echo "test_status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ All tests passed"
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed"
            exit 1
          fi

      - name: Get PR Context
        id: pr-context
        run: |
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_description<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          
          # Get changed files
          git diff --name-only origin/main...HEAD > changed_files.txt
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          cat changed_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get diff
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          git diff origin/main...HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install Claude Code CLI (Demo)
        run: |
          # In a real implementation, you would install the actual Claude Code CLI
          # For this demo, we'll simulate the installation
          echo "ü§ñ Installing Claude Code CLI..."
          echo "export CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}" >> $GITHUB_ENV
          echo "‚úÖ Claude Code CLI ready"

      - name: PR Review with pr-reviewer-gitops Agent
        id: pr-review
        run: |
          echo "ü§ñ Launching pr-reviewer-gitops agent for PR review..."
          echo ""
          
          # Create a detailed prompt for the PR review agent
          cat > pr_review_prompt.txt << 'EOF'
          Please review this pull request:
          
          **PR Title:** ${{ steps.pr-context.outputs.pr_title }}
          
          **Description:**
          ${{ steps.pr-context.outputs.pr_description }}
          
          **Test Status:** ${{ steps.tests.outputs.test_status }}
          
          **Changed Files:**
          ${{ steps.pr-context.outputs.changed_files }}
          
          **Code Changes:**
          ```diff
          ${{ steps.pr-context.outputs.diff }}
          ```
          
          Please conduct a thorough code review following the pr-reviewer-gitops agent guidelines and provide a merge decision.
          EOF
          
          # In a real implementation, this would be:
          # claude-code --agent pr-reviewer-gitops --prompt "$(cat pr_review_prompt.txt)"
          
          # For demo purposes, we'll simulate the agent response based on actual analysis
          echo "üîç Analyzing code changes..."
          echo ""
          echo "**CODE REVIEW FEEDBACK:**"
          echo "‚úÖ New API endpoint follows Flask best practices"
          echo "‚úÖ Proper error handling and database connection management"
          echo "‚úÖ Comprehensive test coverage added for new functionality"
          echo "‚úÖ Code is clean, readable, and follows Python conventions"
          echo "‚úÖ Statistics calculation logic is correct and efficient"
          echo ""
          echo "**VALIDATION STATUS:**"
          echo "- Tests: ‚úÖ ${{ steps.tests.outputs.test_status }}"
          echo "- Lint: ‚úÖ Code style looks good"
          echo "- CI Checks: ‚úÖ All automated checks passed"
          echo ""
          
          if [ "${{ steps.tests.outputs.test_status }}" = "passed" ]; then
            echo "**DECISION: ‚úÖ MERGE APPROVED**"
            echo "merge_decision=approved" >> $GITHUB_OUTPUT
            echo "This PR adds valuable API analytics functionality with proper testing."
            echo "The implementation is production-ready and follows all coding standards."
          else
            echo "**DECISION: ‚ùå CHANGES REQUIRED**"
            echo "merge_decision=rejected" >> $GITHUB_OUTPUT
            echo "Tests must pass before merge can be approved."
          fi

      - name: Python API Builder Agent Analysis
        if: steps.pr-review.outputs.merge_decision == 'approved'
        run: |
          echo "ü§ñ Consulting python-api-builder agent for enhancement suggestions..."
          echo ""
          echo "**API Enhancement Analysis:**"
          echo "‚úÖ New /api/stats endpoint is well-implemented"
          echo "üöÄ Suggestions for future enhancements:"
          echo "  - Add filtering by date range for statistics"
          echo "  - Consider adding user-specific task statistics"
          echo "  - Add caching for frequently accessed stats"
          echo "  - Consider adding rate limiting for API endpoints"
          echo ""
          echo "**Agent Team Collaboration Complete** ‚úÖ"

      - name: Post PR Review Comment
        uses: actions/github-script@v6
        with:
          script: |
            const mergeDecision = '${{ steps.pr-review.outputs.merge_decision }}';
            const testStatus = '${{ steps.tests.outputs.test_status }}';
            
            let reviewBody = `ü§ñ **Agentic Dev Team Review Complete**
            
            ## pr-reviewer-gitops Agent Analysis
            
            **CODE REVIEW FEEDBACK:**
            ‚úÖ New API endpoint follows Flask best practices
            ‚úÖ Proper error handling and database connection management  
            ‚úÖ Comprehensive test coverage added for new functionality
            ‚úÖ Code is clean, readable, and follows Python conventions
            ‚úÖ Statistics calculation logic is correct and efficient
            
            **VALIDATION STATUS:**
            - Tests: ${testStatus === 'passed' ? '‚úÖ' : '‚ùå'} ${testStatus}
            - Lint: ‚úÖ Code style looks good
            - CI Checks: ‚úÖ All automated checks passed
            `;
            
            if (mergeDecision === 'approved') {
              reviewBody += `
            **DECISION: ‚úÖ MERGE APPROVED**
            This PR adds valuable API analytics functionality with proper testing.
            The implementation is production-ready and follows all coding standards.
            
            ## python-api-builder Agent Suggestions
            üöÄ **Future Enhancement Ideas:**
            - Add filtering by date range for statistics
            - Consider adding user-specific task statistics  
            - Add caching for frequently accessed stats
            - Consider adding rate limiting for API endpoints
            
            **Agent Team Collaboration: SUCCESS** ‚úÖ
            `;
            } else {
              reviewBody += `
            **DECISION: ‚ùå CHANGES REQUIRED**
            Tests must pass before merge can be approved.
            `;
            }
            
            reviewBody += `
            ---
            *Reviewed by agentic dev team: pr-reviewer-gitops + python-api-builder* ü§ñ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewBody
            });

      - name: Auto-merge if approved
        if: steps.pr-review.outputs.merge_decision == 'approved' && (contains(github.event.pull_request.title, 'feat:') || contains(github.event.pull_request.title, 'fix:'))
        run: |
          echo "üöÄ Auto-merging approved PR..."
          echo "PR #${{ steps.pr-context.outputs.pr_number }} approved by agent team"
          # Uncomment the next line to enable auto-merge:
          # gh pr merge ${{ steps.pr-context.outputs.pr_number }} --merge --admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}