name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            # Update system and install required packages
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-pip git python3-venv curl

            # Create project directory
            mkdir -p /home/ubuntu/taskmanager
            cd /home/ubuntu/taskmanager

            # Clone or pull latest changes
            if [ ! -d ".git" ]; then
              echo "📥 Cloning repository..."
              git clone https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git .
            else
              echo "📥 Pulling latest changes..."
              git pull https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git main
            fi

            # Setup Python virtual environment
            echo "🐍 Setting up Python environment..."
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Kill any existing Flask processes
            echo "🔄 Stopping existing Flask processes..."
            ps aux | grep "[p]ython.*app.py" | awk '{print $2}' | xargs -r kill -TERM || true
            sleep 3
            ps aux | grep "[p]ython.*app.py" | awk '{print $2}' | xargs -r kill -KILL || true

            # Remove any old log
            rm -f app.log

            # Start Flask app using nohup so it persists after SSH exits
            echo "🚀 Starting Flask application in background using nohup..."
            source venv/bin/activate
            nohup python app.py > app.log 2>&1 &

            # Wait for the app to come online
            echo "⏳ Waiting for Flask to start..."
            sleep 8

            # Check if health endpoint responds
            for i in {1..5}; do
              if curl -f -s http://localhost:5000/health > /dev/null; then
                echo "✅ Health endpoint is responsive"
                break
              elif [ $i -eq 5 ]; then
                echo "❌ Health endpoint failed after 5 attempts"
                tail -20 app.log || echo "No logs found"
                exit 1
              else
                echo "⏳ Attempt $i/5 - waiting..."
                sleep 2
              fi
            done

            # Get public IP for reference
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "🌐 App is running!"
            echo "🔗 http://$PUBLIC_IP:5000"
            echo "🩺 Health: http://$PUBLIC_IP:5000/health"
