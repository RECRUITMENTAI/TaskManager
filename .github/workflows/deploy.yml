name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            echo "🚀 Updating system packages..."
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-pip git python3-venv curl

            echo "📁 Preparing project directory..."
            mkdir -p /home/ubuntu/taskmanager
            cd /home/ubuntu/taskmanager

            echo "📥 Syncing repository..."
            if [ ! -d ".git" ]; then
              git clone https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git .
            else
              git pull https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git main
            fi

            echo "🐍 Setting up Python virtual environment..."
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "🛠️ Creating or updating systemd service..."
            sudo tee /etc/systemd/system/flaskapp.service > /dev/null <<EOF
            [Unit]
            Description=TaskManager Flask App
            After=network.target

            [Service]
            User=ubuntu
            WorkingDirectory=/home/ubuntu/taskmanager
            ExecStart=/home/ubuntu/taskmanager/venv/bin/python /home/ubuntu/taskmanager/app.py
            Restart=always
            Environment=FLASK_ENV=production

            [Install]
            WantedBy=multi-user.target
            EOF

            echo "🔄 Restarting systemd service..."
            sudo systemctl daemon-reload
            sudo systemctl enable flaskapp
            sudo systemctl restart flaskapp

            echo "⏳ Waiting for Flask app to respond..."
            sleep 8
            for i in {1..5}; do
              if curl -f -s http://localhost:5000/health > /dev/null; then
                echo "✅ Health endpoint is responsive"
                break
              elif [ $i -eq 5 ]; then
                echo "❌ Health endpoint failed after 5 attempts"
                sudo journalctl -u flaskapp -n 20 || echo "No logs available"
                exit 1
              else
                echo "⏳ Attempt $i/5 - waiting..."
                sleep 2
              fi
            done

            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "🌐 App is running!"
            echo "🔗 http://$PUBLIC_IP:5000"
            echo "🩺 Health: http://$PUBLIC_IP:5000/health"