name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Update system and install required packages
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-pip git python3-venv
            
            # Create directory if it doesn't exist
            mkdir -p /home/ubuntu/taskmanager
            cd /home/ubuntu/taskmanager
            
            # Clone/update repo using Personal Access Token
            if [ ! -d ".git" ]; then
              echo "📥 Cloning repository..."
              git clone https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git .
            else
              echo "📥 Pulling latest changes..."
              git pull https://${{ secrets.PAT_TOKEN }}@github.com/RECRUITMENTAI/TaskManager.git main
            fi
            
            # Setup Python virtual environment
            echo "🐍 Setting up Python environment..."
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Kill existing Flask processes gracefully
            echo "🔄 Stopping existing Flask processes..."
            ps aux | grep "[p]ython.*app.py" | awk '{print $2}' | xargs -r kill -TERM || true
            sleep 3
            ps aux | grep "[p]ython.*app.py" | awk '{print $2}' | xargs -r kill -KILL || true
            
            # Remove any existing log file
            rm -f app.log
            
            # Start Flask app with proper backgrounding
            echo "🚀 Starting Flask application..."
            source venv/bin/activate
            python app.py > app.log 2>&1 &
            APP_PID=$!
            echo "Flask started with PID: $APP_PID"
            
            # Give Flask time to start
            echo "⏳ Waiting for Flask to start..."
            sleep 8
            
            # Check if Flask is running
            if ps -p $APP_PID > /dev/null 2>&1; then
              echo "✅ Flask process is running"
              
              # Test the health endpoint
              echo "🔍 Testing health endpoint..."
              for i in {1..5}; do
                if curl -f -s http://localhost:5000/health > /dev/null; then
                  echo "✅ Health endpoint responding"
                  break
                elif [ $i -eq 5 ]; then
                  echo "❌ Health endpoint not responding after 5 attempts"
                  echo "Flask process status:"
                  ps -p $APP_PID || echo "Flask process $APP_PID not found"
                  echo "Last 20 lines of app.log:"
                  tail -20 app.log 2>/dev/null || echo "No log file found"
                  exit 1
                else
                  echo "⏳ Attempt $i/5 - waiting for health endpoint..."
                  sleep 2
                fi
              done
              
              # Get public IP and show success
              PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
              echo "🌐 Flask app deployed successfully!"
              echo "🌐 App accessible at: http://$PUBLIC_IP:5000"
              echo "🔍 Health endpoint: http://$PUBLIC_IP:5000/health"
              
            else
              echo "❌ Flask process not running"
              echo "Last 20 lines of app.log:"
              tail -20 app.log 2>/dev/null || echo "No log file found"
              exit 1
            fi
